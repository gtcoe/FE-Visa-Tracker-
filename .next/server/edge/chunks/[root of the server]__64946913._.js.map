{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/constants/appConstants.ts"],"sourcesContent":["// Define user roles\nexport type UserRole = \"client\" | \"manager\" | \"admin\";\n\n// Define role-based redirect paths\nexport const DEFAULT_PATHS: Record<UserRole, string> = {\n  client: \"/visaistic/application-tracker\",\n  manager: \"/visaistic/application-tracker\",\n  admin: \"/visaistic/manage-users\",\n};\n\n// Define routes that are accessible to each role\nexport const ROLE_ROUTES: Record<UserRole, string[]> = {\n  client: [\"/application-tracker\", \"/check-list\", \"/services\", \"/manage-users\", \"/manage-clients\"],\n  manager: [\"/application-tracker\", \"/check-list\", \"/services\", \"/manage-users\", \"/manage-clients\"],\n  admin: [\"/application-tracker\", \"/check-list\", \"/services\", \"/manage-users\", \"/manage-clients\"],\n};\n\n// Define the navigation items for each role\nexport const roleBasedNavItems = {\n  client: [\n    { label: \"Application Tracker\", path: \"/application-tracker\" },\n    { label: \"Manage Users\", path: \"/manage-users\" },\n    { label: \"Check list\", path: \"/check-list\" },\n    { label: \"Services\", path: \"/services\" },\n    { label: \"Manage Clients\", path: \"/manage-clients\" },\n\n  ],\n  manager: [\n    \n    { label: \"Application Tracker\", path: \"/application-tracker\" },\n    { label: \"Manage Users\", path: \"/manage-users\" },\n    { label: \"Check list\", path: \"/check-list\" },\n    { label: \"Services\", path: \"/services\" },\n    { label: \"Manage Clients\", path: \"/manage-clients\" },\n  ],\n  admin: [\n    { label: \"Application Tracker\", path: \"/application-tracker\" },\n    { label: \"Manage Users\", path: \"/manage-users\" },\n    { label: \"Check list\", path: \"/check-list\" },\n    { label: \"Services\", path: \"/services\" },\n    { label: \"Manage Clients\", path: \"/manage-clients\" },\n  ],\n};\n\n// Define the default landing page for each role\nexport const defaultRoutes: Record<UserRole, string> = {\n  client: \"/visaistic/application-tracker\",\n  manager: \"/visaistic/application-tracker\",\n  admin: \"/visaistic/manage-users\",\n};\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;;AAIb,MAAM,gBAA0C;IACrD,QAAQ;IACR,SAAS;IACT,OAAO;AACT;AAGO,MAAM,cAA0C;IACrD,QAAQ;QAAC;QAAwB;QAAe;QAAa;QAAiB;KAAkB;IAChG,SAAS;QAAC;QAAwB;QAAe;QAAa;QAAiB;KAAkB;IACjG,OAAO;QAAC;QAAwB;QAAe;QAAa;QAAiB;KAAkB;AACjG;AAGO,MAAM,oBAAoB;IAC/B,QAAQ;QACN;YAAE,OAAO;YAAuB,MAAM;QAAuB;QAC7D;YAAE,OAAO;YAAgB,MAAM;QAAgB;QAC/C;YAAE,OAAO;YAAc,MAAM;QAAc;QAC3C;YAAE,OAAO;YAAY,MAAM;QAAY;QACvC;YAAE,OAAO;YAAkB,MAAM;QAAkB;KAEpD;IACD,SAAS;QAEP;YAAE,OAAO;YAAuB,MAAM;QAAuB;QAC7D;YAAE,OAAO;YAAgB,MAAM;QAAgB;QAC/C;YAAE,OAAO;YAAc,MAAM;QAAc;QAC3C;YAAE,OAAO;YAAY,MAAM;QAAY;QACvC;YAAE,OAAO;YAAkB,MAAM;QAAkB;KACpD;IACD,OAAO;QACL;YAAE,OAAO;YAAuB,MAAM;QAAuB;QAC7D;YAAE,OAAO;YAAgB,MAAM;QAAgB;QAC/C;YAAE,OAAO;YAAc,MAAM;QAAc;QAC3C;YAAE,OAAO;YAAY,MAAM;QAAY;QACvC;YAAE,OAAO;YAAkB,MAAM;QAAkB;KACpD;AACH;AAGO,MAAM,gBAA0C;IACrD,QAAQ;IACR,SAAS;IACT,OAAO;AACT"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["// middleware.ts\nimport { NextResponse } from \"next/server\";\nimport type { NextRequest } from \"next/server\";\nimport { DEFAULT_PATHS, ROLE_ROUTES } from \"./constants/appConstants\";\n\nexport async function middleware(request: NextRequest) {\n  // Get the pathname from the URL\n  const path = request.nextUrl.pathname;\n\n  // Skip middleware for API routes and public assets\n  if (\n    path.startsWith(\"/api\") ||\n    path.startsWith(\"/_next\") ||\n    path.startsWith(\"/images\")\n  ) {\n    return NextResponse.next();\n  }\n\n  // Get the auth token from the request cookies or headers\n  //   const authToken =\n  //     request.cookies.get(\"auth_token\")?.value ||\n  //     request.headers.get(\"authorization\");\n\n  //update role to check\n  const authToken = \"client\";\n\n  // If no authentication, redirect to login\n  if (!authToken && path !== \"/visaistic\") {\n    return NextResponse.redirect(new URL(\"/visaistic\", request.url));\n  }\n\n  // For this example, we'll determine role from the token\n  // In production, you'd decode the JWT or session token properly\n  let role;\n  if (authToken) {\n    role = authToken.includes(\"admin\")\n      ? \"admin\"\n      : authToken.includes(\"manager\")\n      ? \"manager\"\n      : \"client\";\n  }\n\n  // Root path should redirect to the default page for the role\n  if (path === \"/visaistic\" && role) {\n    return NextResponse.redirect(new URL(DEFAULT_PATHS[role], request.url));\n  }\n\n  // Check if the user has access to the requested path\n  if (role && !ROLE_ROUTES[role].some((route) => path.startsWith(route))) {\n    // Redirect to the default path for their role if they don't have access\n    return NextResponse.redirect(new URL(DEFAULT_PATHS[role], request.url));\n  }\n\n  // Allow the request to proceed\n  return NextResponse.next();\n}\n\n// Configure the middleware to run on specific paths\nexport const config = {\n  matcher: [\n    /*\n     * Match all paths except for:\n     * 1. /api routes\n     * 2. /_next (Next.js internals)\n     * 3. /images (static files)\n     * 4. /.well-known (security-related files)\n     * 5. favicon.ico, robots.txt, sitemap.xml\n     */\n    \"/((?!api|_next|images|.well-known|favicon.ico|robots.txt|sitemap.xml).*)\",\n  ],\n};\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,gCAAgC;IAChC,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IAErC,mDAAmD;IACnD,IACE,KAAK,UAAU,CAAC,WAChB,KAAK,UAAU,CAAC,aAChB,KAAK,UAAU,CAAC,YAChB;QACA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,yDAAyD;IACzD,sBAAsB;IACtB,kDAAkD;IAClD,4CAA4C;IAE5C,sBAAsB;IACtB,MAAM,YAAY;IAElB,0CAA0C;IAC1C,uCAAyC;;IAEzC;IAEA,wDAAwD;IACxD,gEAAgE;IAChE,IAAI;IACJ,wCAAe;QACb,OAAO,UAAU,QAAQ,CAAC,WACtB,UACA,UAAU,QAAQ,CAAC,aACnB,YACA;IACN;IAEA,6DAA6D;IAC7D,IAAI,SAAS,gBAAgB,MAAM;QACjC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iIAAA,CAAA,gBAAa,CAAC,KAAK,EAAE,QAAQ,GAAG;IACvE;IAEA,qDAAqD;IACrD,IAAI,QAAQ,CAAC,iIAAA,CAAA,cAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAU,KAAK,UAAU,CAAC,SAAS;QACtE,wEAAwE;QACxE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iIAAA,CAAA,gBAAa,CAAC,KAAK,EAAE,QAAQ,GAAG;IACvE;IAEA,+BAA+B;IAC/B,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}